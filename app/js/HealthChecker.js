// Generated by CoffeeScript 1.12.4
(function() {
  var LockManager, ObjectId, async, logger, port, request, settings;

  ObjectId = require("mongojs").ObjectId;

  request = require("request");

  async = require("async");

  settings = require("settings-sharelatex");

  port = settings.internal.trackchanges.port;

  logger = require("logger-sharelatex");

  LockManager = require("./LockManager");

  module.exports = {
    check: function(callback) {
      var jobs, project_id, url;
      project_id = ObjectId(settings.trackchanges.healthCheck.project_id);
      url = "http://localhost:" + port + "/project/" + project_id;
      logger.log({
        project_id: project_id
      }, "running health check");
      jobs = [
        function(cb) {
          return request.get({
            url: "http://localhost:" + port + "/check_lock",
            timeout: 3000
          }, function(err, res, body) {
            if (err != null) {
              logger.err({
                err: err,
                project_id: project_id
              }, "error checking lock for health check");
              return cb(err);
            } else if ((res != null ? res.statusCode : void 0) !== 200) {
              return cb("status code not 200, it's " + res.statusCode);
            } else {
              return cb();
            }
          });
        }, function(cb) {
          return request.post({
            url: url + "/flush",
            timeout: 10000
          }, function(err, res, body) {
            if (err != null) {
              logger.err({
                err: err,
                project_id: project_id
              }, "error flushing for health check");
              return cb(err);
            } else if ((res != null ? res.statusCode : void 0) !== 204) {
              return cb("status code not 204, it's " + res.statusCode);
            } else {
              return cb();
            }
          });
        }, function(cb) {
          return request.get({
            url: url + "/updates",
            timeout: 10000
          }, function(err, res, body) {
            if (err != null) {
              logger.err({
                err: err,
                project_id: project_id
              }, "error getting updates for health check");
              return cb(err);
            } else if ((res != null ? res.statusCode : void 0) !== 200) {
              return cb("status code not 200, it's " + res.statusCode);
            } else {
              return cb();
            }
          });
        }
      ];
      return async.series(jobs, callback);
    },
    checkLock: function(callback) {
      return LockManager.healthCheck(callback);
    }
  };

}).call(this);

//# sourceMappingURL=HealthChecker.js.map
