// Generated by CoffeeScript 1.12.4
(function() {
  var Keys, RedisManager, Settings, async, rclient, redis;

  Settings = require("settings-sharelatex");

  redis = require("redis-sharelatex");

  rclient = redis.createClient(Settings.redis.history);

  Keys = Settings.redis.history.key_schema;

  async = require("async");

  module.exports = RedisManager = {
    getOldestDocUpdates: function(doc_id, batchSize, callback) {
      var key;
      if (callback == null) {
        callback = function(error, jsonUpdates) {};
      }
      key = Keys.uncompressedHistoryOps({
        doc_id: doc_id
      });
      return rclient.lrange(key, 0, batchSize - 1, callback);
    },
    expandDocUpdates: function(jsonUpdates, callback) {
      var e, rawUpdates, update;
      if (callback == null) {
        callback = function(error, rawUpdates) {};
      }
      try {
        rawUpdates = (function() {
          var i, len, ref, results1;
          ref = jsonUpdates || [];
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            update = ref[i];
            results1.push(JSON.parse(update));
          }
          return results1;
        })();
      } catch (error1) {
        e = error1;
        return callback(e);
      }
      return callback(null, rawUpdates);
    },
    deleteAppliedDocUpdates: function(project_id, doc_id, docUpdates, callback) {
      var i, len, multi, ref, update;
      if (callback == null) {
        callback = function(error) {};
      }
      multi = rclient.multi();
      ref = docUpdates || [];
      for (i = 0, len = ref.length; i < len; i++) {
        update = ref[i];
        multi.lrem(Keys.uncompressedHistoryOps({
          doc_id: doc_id
        }), 1, update);
      }
      return multi.exec(function(error, results) {
        if (error != null) {
          return callback(error);
        }
        return rclient.srem(Keys.docsWithHistoryOps({
          project_id: project_id
        }), doc_id, function(error) {
          if (error != null) {
            return callback(error);
          }
          return callback(null);
        });
      });
    },
    getDocIdsWithHistoryOps: function(project_id, callback) {
      if (callback == null) {
        callback = function(error, doc_ids) {};
      }
      return rclient.smembers(Keys.docsWithHistoryOps({
        project_id: project_id
      }), callback);
    },
    _getKeys: function(pattern, callback) {
      var doKeyLookupForNode, nodes;
      nodes = (typeof rclient.nodes === "function" ? rclient.nodes('master') : void 0) || [rclient];
      doKeyLookupForNode = function(node, cb) {
        return RedisManager._getKeysFromNode(node, pattern, cb);
      };
      return async.concatSeries(nodes, doKeyLookupForNode, callback);
    },
    _getKeysFromNode: function(node, pattern, callback) {
      var cursor, doIteration, keySet;
      cursor = 0;
      keySet = {};
      doIteration = function(cb) {
        return node.scan(cursor, "MATCH", pattern, "COUNT", 1000, function(error, reply) {
          var i, key, keys, len;
          if (error != null) {
            return callback(error);
          }
          cursor = reply[0], keys = reply[1];
          for (i = 0, len = keys.length; i < len; i++) {
            key = keys[i];
            keySet[key] = true;
          }
          if (cursor === '0') {
            return callback(null, Object.keys(keySet));
          } else {
            return doIteration();
          }
        });
      };
      return doIteration();
    },
    _extractIds: function(keyList) {
      var ids, key, m;
      ids = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = keyList.length; i < len; i++) {
          key = keyList[i];
          m = key.match(/:\{?([0-9a-f]{24})\}?/);
          results1.push(m[1]);
        }
        return results1;
      })();
      return ids;
    },
    getProjectIdsWithHistoryOps: function(callback) {
      if (callback == null) {
        callback = function(error, project_ids) {};
      }
      return RedisManager._getKeys(Keys.docsWithHistoryOps({
        project_id: "*"
      }), function(error, project_keys) {
        var project_ids;
        if (error != null) {
          return callback(error);
        }
        project_ids = RedisManager._extractIds(project_keys);
        return callback(error, project_ids);
      });
    },
    getAllDocIdsWithHistoryOps: function(callback) {
      if (callback == null) {
        callback = function(error, doc_ids) {};
      }
      return RedisManager._getKeys(Keys.uncompressedHistoryOps({
        doc_id: "*"
      }), function(error, doc_keys) {
        var doc_ids;
        if (error != null) {
          return callback(error);
        }
        doc_ids = RedisManager._extractIds(doc_keys);
        return callback(error, doc_ids);
      });
    }
  };

}).call(this);

//# sourceMappingURL=RedisManager.js.map
