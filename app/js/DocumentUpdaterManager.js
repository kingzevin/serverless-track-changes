// Generated by CoffeeScript 1.12.4
(function() {
  var DocumentUpdaterManager, Settings, logger, request;

  request = require("request");

  logger = require("logger-sharelatex");

  Settings = require("settings-sharelatex");

  module.exports = DocumentUpdaterManager = {
    getDocument: function(project_id, doc_id, callback) {
      var url;
      if (callback == null) {
        callback = function(error, content, version) {};
      }
      url = Settings.apis.documentupdater.url + "/project/" + project_id + "/doc/" + doc_id;
      logger.log({
        project_id: project_id,
        doc_id: doc_id
      }, "getting doc from document updater");
      return request.get(url, function(error, res, body) {
        if (error != null) {
          return callback(error);
        }
        if (res.statusCode >= 200 && res.statusCode < 300) {
          try {
            body = JSON.parse(body);
          } catch (error1) {
            error = error1;
            return callback(error);
          }
          logger.log({
            project_id: project_id,
            doc_id: doc_id,
            version: body.version
          }, "got doc from document updater");
          return callback(null, body.lines.join("\n"), body.version);
        } else {
          error = new Error("doc updater returned a non-success status code: " + res.statusCode);
          logger.error({
            err: error,
            project_id: project_id,
            doc_id: doc_id,
            url: url
          }, "error accessing doc updater");
          return callback(error);
        }
      });
    },
    setDocument: function(project_id, doc_id, content, user_id, callback) {
      var url;
      if (callback == null) {
        callback = function(error) {};
      }
      url = Settings.apis.documentupdater.url + "/project/" + project_id + "/doc/" + doc_id;
      logger.log({
        project_id: project_id,
        doc_id: doc_id
      }, "setting doc in document updater");
      return request.post({
        url: url,
        json: {
          lines: content.split("\n"),
          source: "restore",
          user_id: user_id,
          undoing: true
        }
      }, function(error, res, body) {
        if (error != null) {
          return callback(error);
        }
        if (res.statusCode >= 200 && res.statusCode < 300) {
          return callback(null);
        } else {
          error = new Error("doc updater returned a non-success status code: " + res.statusCode);
          logger.error({
            err: error,
            project_id: project_id,
            doc_id: doc_id,
            url: url
          }, "error accessing doc updater");
          return callback(error);
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=DocumentUpdaterManager.js.map
