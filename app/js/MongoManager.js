// Generated by CoffeeScript 1.12.4
(function() {
  var MongoManager, ObjectId, PackManager, _, async, db, logger, metrics, ref;

  ref = require("./mongojs"), db = ref.db, ObjectId = ref.ObjectId;

  PackManager = require("./PackManager");

  async = require("async");

  _ = require("underscore");

  metrics = require('metrics-sharelatex');

  logger = require('logger-sharelatex');

  module.exports = MongoManager = {
    getLastCompressedUpdate: function(doc_id, callback) {
      if (callback == null) {
        callback = function(error, update) {};
      }
      return db.docHistory.find({
        doc_id: ObjectId(doc_id.toString())
      }, {
        pack: {
          $slice: -1
        }
      }).sort({
        v: -1
      }).limit(1).toArray(function(error, compressedUpdates) {
        if (error != null) {
          return callback(error);
        }
        return callback(null, compressedUpdates[0] || null);
      });
    },
    peekLastCompressedUpdate: function(doc_id, callback) {
      if (callback == null) {
        callback = function(error, update, version) {};
      }
      return MongoManager.getLastCompressedUpdate(doc_id, function(error, update) {
        var ref1, ref2;
        if (error != null) {
          return callback(error);
        }
        if (update != null) {
          if (update.broken) {
            return callback(null, null);
          } else if (update.pack != null) {
            if (update.finalised) {
              return callback(null, null, (ref1 = update.pack[0]) != null ? ref1.v : void 0);
            } else {
              return callback(null, update, (ref2 = update.pack[0]) != null ? ref2.v : void 0);
            }
          } else {
            return callback(null, update, update.v);
          }
        } else {
          return PackManager.getLastPackFromIndex(doc_id, function(error, pack) {
            if (error != null) {
              return callback(error);
            }
            if (((pack != null ? pack.inS3 : void 0) != null) && ((pack != null ? pack.v_end : void 0) != null)) {
              return callback(null, null, pack.v_end);
            }
            return callback(null, null);
          });
        }
      });
    },
    backportProjectId: function(project_id, doc_id, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return db.docHistory.update({
        doc_id: ObjectId(doc_id.toString()),
        project_id: {
          $exists: false
        }
      }, {
        $set: {
          project_id: ObjectId(project_id.toString())
        }
      }, {
        multi: true
      }, callback);
    },
    getProjectMetaData: function(project_id, callback) {
      if (callback == null) {
        callback = function(error, metadata) {};
      }
      return db.projectHistoryMetaData.find({
        project_id: ObjectId(project_id.toString())
      }, function(error, results) {
        if (error != null) {
          return callback(error);
        }
        return callback(null, results[0]);
      });
    },
    setProjectMetaData: function(project_id, metadata, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return db.projectHistoryMetaData.update({
        project_id: ObjectId(project_id)
      }, {
        $set: metadata
      }, {
        upsert: true
      }, callback);
    },
    upgradeHistory: function(project_id, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return db.docHistory.update({
        project_id: ObjectId(project_id),
        temporary: true,
        expiresAt: {
          $exists: true
        }
      }, {
        $set: {
          temporary: false
        },
        $unset: {
          expiresAt: ""
        }
      }, {
        multi: true
      }, callback);
    },
    ensureIndices: function() {
      db.docHistory.ensureIndex({
        doc_id: 1,
        v: 1
      }, {
        background: true
      });
      db.docHistory.ensureIndex({
        project_id: 1,
        "meta.end_ts": 1
      }, {
        background: true
      });
      db.docHistory.ensureIndex({
        doc_id: 1,
        project_id: 1
      }, {
        background: true
      });
      db.projectHistoryMetaData.ensureIndex({
        project_id: 1
      }, {
        background: true
      });
      db.docHistory.ensureIndex({
        expiresAt: 1
      }, {
        expireAfterSeconds: 0,
        background: true
      });
      db.docHistory.ensureIndex({
        last_checked: 1
      }, {
        background: true
      });
      return db.docHistoryIndex.ensureIndex({
        project_id: 1
      }, {
        background: true
      });
    }
  };

  ['getLastCompressedUpdate', 'getProjectMetaData', 'setProjectMetaData'].map(function(method) {
    return metrics.timeAsyncMethod(MongoManager, method, 'mongo.MongoManager', logger);
  });

}).call(this);

//# sourceMappingURL=MongoManager.js.map
