// Generated by CoffeeScript 1.12.4
(function () {
  var HttpController, Metrics, Path, Settings, TrackChangesLogger, app, child_process, express, host, logger, packWorker, port, ref, ref1, ref2, ref3, ref4, truncateFn;

  process.env["WEB_API_HOST"] = '172.17.0.1';
  process.env["WEB_HOST"] = '172.17.0.1';
  process.env["SHARELATEX_MONGO_URL"] = "mongodb://172.17.0.1/sharelatex";
  process.env["MONGO_HOST"] = '172.17.0.1';
  process.env["SHARELATEX_REDIS_HOST"] = '172.17.0.1';
  process.env["REDIS_HOST"] = '172.17.0.1';
  process.env["TAGS_HOST"] = '172.17.0.1';
  process.env["CLSI_HOST"] = '172.17.0.1';
  process.env["CHAT_HOST"] = '172.17.0.1';
  process.env["DOCSTORE_HOST"] = '172.17.0.1';
  process.env["SPELLING_HOST"] = '172.17.0.1';
  process.env["FILESTORE_HOST"] = '172.17.0.1';
  process.env["DOCUMENT_UPDATER_HOST"] = '172.17.0.1';
  process.env["NOTIFICATIONS_HOST"] = '172.17.0.1';
  process.env["CONTACTS_HOST"] = '172.17.0.1';
  process.env["LISTEN_ADDRESS"] = '0.0.0.0';
  process.env["REALTIME_HOST"] = '172.17.0.1';
  process.env["TRACK_CHANGES_HOST"] = '172.17.0.1';
  process.env["ENABLE_CONVERSIONS"] = 'true';
  process.env["WEB_API_USER"] = 'sharelatex';
  process.env["ENABLED_LINKED_FILE_TYPES"] = 'url;project_file';
  process.env["SHARELATEX_APP_NAME"] = 'Overleaf Community Edition';
  process.env["APP_NAME"] = 'Overleaf Community Edition';
  process.env["WEB_API_PASSWORD"] = 'rAp8aFvtk77m20PG6Kedzt3iOOrWKJ3pL5eiaQsP6s';
  process.env["SESSION_SECRET"] = 'K1pOaUSsFIoXADLUIgtIh4toKBzgoZS1vHRXNySWQc';
  process.env["SHARELATEX_SESSION_SECRET"] = 'K1pOaUSsFIoXADLUIgtIh4toKBzgoZS1vHRXNySWQc';
  process.env["SHARELATEX_CONFIG"] = __dirname + '/settings.coffee';
  process.env['WEB_URL'] = 'https://172.17.0.1/api/v1/web/guest/sharelatex/web'
  process.env['DOOCUMENT_UPDATER_URL'] = 'https://172.17.0.1/api/v1/web/guest/sharelatex/document-updater'

  process.env['NODE_TLS_REJECT_UNAUTHORIZED']=0

  Metrics = require("metrics-sharelatex");

  Metrics.initialize("track-changes");

  Settings = require("settings-sharelatex");

  logger = require("logger-sharelatex");

  TrackChangesLogger = logger.initialize("track-changes").logger;

  if (((ref = Settings.sentry) != null ? ref.dsn : void 0) != null) {
    logger.initializeErrorReporting(Settings.sentry.dsn);
  }

  truncateFn = function (updates) {
    return JSON.parse(JSON.stringify(updates, function (key, value) {
      var len;
      if (typeof value === 'string' && (len = value.length) > 80) {
        return value.substr(0, 32) + ("...(message of length " + len + " truncated)...") + value.substr(-32);
      } else {
        return value;
      }
    }));
  };

  TrackChangesLogger.addSerializers({
    rawUpdate: truncateFn,
    rawUpdates: truncateFn,
    newUpdates: truncateFn,
    lastUpdate: truncateFn
  });

  Path = require("path");

  Metrics.memory.monitor(logger);

  child_process = require("child_process");

  HttpController = require("./app/js/HttpController");

  express = require("express");

  app = express();

  app.use(Metrics.http.monitor(logger));

  Metrics.injectMetricsRoute(app);

  app.post("/project/:project_id/doc/:doc_id/flush", HttpController.flushDoc);

  app.get("/project/:project_id/doc/:doc_id/diff", HttpController.getDiff);

  app.get("/project/:project_id/doc/:doc_id/check", HttpController.checkDoc);

  app.get("/project/:project_id/updates", HttpController.getUpdates);

  app.post("/project/:project_id/flush", HttpController.flushProject);

  app.post("/project/:project_id/doc/:doc_id/version/:version/restore", HttpController.restore);

  app.post('/project/:project_id/doc/:doc_id/push', HttpController.pushDocHistory);

  app.post('/project/:project_id/doc/:doc_id/pull', HttpController.pullDocHistory);

  app.post('/flush/all', HttpController.flushAll);

  app.post('/check/dangling', HttpController.checkDanglingUpdates);

  packWorker = null;

  app.post("/pack", function (req, res, next) {
    if (packWorker != null) {
      return res.send("pack already running");
    } else {
      logger.log("running pack");
      packWorker = child_process.fork(__dirname + '/app/js/PackWorker.js', [req.query.limit || 1000, req.query.delay || 1000, req.query.timeout || 30 * 60 * 1000]);
      packWorker.on('exit', function (code, signal) {
        logger.log({
          code: code,
          signal: signal
        }, "history auto pack exited");
        return packWorker = null;
      });
      return res.send("pack started");
    }
  });

  app.get("/status", function (req, res, next) {
    return res.send("track-changes is alive");
  });

  app.get("/oops", function (req, res, next) {
    throw new Error("dummy test error");
  });

  app.get("/check_lock", HttpController.checkLock);

  app.get("/health_check", HttpController.healthCheck);

  app.use(function (error, req, res, next) {
    logger.error({
      err: error,
      req: req
    }, "an internal error occured");
    return res.send(500);
  });

  port = ((ref1 = Settings.internal) != null ? (ref2 = ref1.trackchanges) != null ? ref2.port : void 0 : void 0) || 3015;

  host = ((ref3 = Settings.internal) != null ? (ref4 = ref3.trackchanges) != null ? ref4.host : void 0 : void 0) || "localhost";

  // if (!module.parent) {
    app.listen(port, host, function (error) {
      if (error != null) {
        return logger.error({
          err: error
        }, "could not start track-changes server");
      } else {
        return logger.info("trackchanges starting up, listening on " + host + ":" + port);
      }
    });
  // }

  // module.exports = app;

  exports.main = test

  function test(params = {}) {
    const url = params.__ow_path || '/project/5ee9ea6bd9085c0007b38bfe/doc/5ee9ea6bd9085c0007b38bff/diff?from=3&to=5';
    const method = params.__ow_method || 'get';
    const headers = params.__ow_headers || {
      'X-User-Id': '5ec7b3d14857fc00a946704b'
    };
    const { promisify } = require('util')
    const request = require("request")
    const reqPromise = promisify(request[method]);
    let opt={}
    opt['headers'] = headers;
    opt['url'] = `http://localhost:3015${url}`;
    if(params.__ow_query !== ""){
      // opt['qs'] = params.__ow_query;
      const qs = '?' + params.__ow_query;
      opt['url'] = opt['url'] + qs;
    }
    // return {body: {params, opt}}
    
    return (async () => {
      let result = await reqPromise(opt)
      var response = JSON.parse(JSON.stringify(result));

      delete response.request
      return response
    })();
  }

  if (!module.parent) {
    (async () => {
      let result = await test();
      console.log(result);
    })();
  }
}).call(this);

//# sourceMappingURL=app.js.map
